metavar exprvar, x, y, z ::= {{ repr-locally-nameless }}
metavar number, n ::= {{ coq nat }}

grammar

kind, k :: 'k_' ::= {{ com kind }}
  | *   :: :: star {{ com type of type }}
  | box :: :: box  {{ com type of type of type }}

body, b :: 'b_' ::= {{ com annotated function body }}
  | e : A :: :: anno

expr, e, A, B, C, D, t, s :: 'e_' ::= {{ com expressions }}
  | x       :: :: var  {{ com variable }}
  | k       :: :: kind {{ com type of type }}
  | n       :: :: num  {{ com integer value }}
  | int     :: :: int  {{ com integer type }}
  | bot : A :: :: bot  {{ com bottom value }}
  | e1 e2   :: :: app  {{ com application }}
  | lambda x : A . b :: :: abs  (+ bind x in b +) {{ com abstraction }}
  | pi     x : A . B :: :: pi   (+ bind x in B +) {{ com dependent product }}
  | bind   x : A . b :: :: bind (+ bind x in b +) {{ com implicit lambda }}
  | forall x : A . B :: :: all  (+ bind x in B +) {{ com implicit function type }}
%  | mu     x : A . e :: :: mu   (+ bind x in e +) {{ com fix point expression }}
  | castup [ A ] e   :: :: castup {{ com cast up }}
  | castdn       e   :: :: castdn {{ com cast down }}
  | ( e )         :: S :: paren {{ coq ([[e]]) }}
  | [ e1 / x ] e2 :: M :: subst {{ coq (open_expr_wrt_expr [[x e2]] [[e1]]) }}

context, G :: 'ctx_' ::=
  | nil       :: :: nil
  | G , x : A :: :: cons

formula :: formula_ ::=
  | judgement  ::   :: judgement
  | G |- e d A :: M :: bi_typing {{ coq (busub [[G]] [[e]] [[e]] [[d]] [[A]]) }}
  | G |- e : A :: M :: typing    {{ coq (usub [[G]] [[e]] [[e]] [[A]]) }}
  | x # G      :: M :: ctx_fresh {{ coq ([[x]] `notin` ctx_dom [[G]]) }}
  | x # e *     :: M :: erased_fresh
    {{ coq ([[x]] `notin` fv_eexpr (erase [[e]])) }}

substitutions
  single e x :: subst

freevars
  expr    x :: fv

embed {{ coq

Require Import erased.ott.

Fixpoint ctx_dom (G : context) : atoms :=
  match G with
  | ctx_nil => {}
  | ctx_cons G x A => add x (ctx_dom G)
  end
.

Fixpoint erase (e : expr) : eexpr :=
  match e with
  | e_var_f x => ee_var_f x
  | e_var_b x => ee_var_b x
  | e_kind k_star => ee_kind ek_star
  | e_kind k_box  => ee_kind ek_box
  | e_num n => ee_num n
  | e_int   => ee_int
  | e_bot A => ee_bot
  | e_app f a => ee_app (erase f) (erase a)
  | e_abs  A (b_anno e B) => ee_abs  (erase e)
  | e_bind A (b_anno e B) => ee_bind (erase e)
  | e_pi  A B => ee_pi  (erase A) (erase B)
  | e_all A B => ee_all (erase A) (erase B)
  | e_castup A e => ee_castup (erase e)
  | e_castdn   e => ee_castdn (erase e)
  end
.
}}

defns
Monotype :: '' ::=

defn
mono A :: :: mono_type :: 'mono_'
by

----------- :: kind
mono k

----------- :: var
mono x

------------- :: int
mono int

----------- :: lit
mono n

----------------- :: bot
mono bot : A

mono e1
mono e2
----------------- :: app
mono (e1 e2)

mono A
mono B
---------------------- :: pi
mono pi x : A . B

mono e
-------------------------- :: lambda
mono lambda x : A . e : B

mono e
------------------------ :: bind
mono bind x : A . e : B

% mono e
% ---------------------- :: mu
% mono mu x : A . e

mono e
---------------------- :: castup
mono castup [A] e

mono e
---------------------- :: castdn
mono castdn e

defns
Reduce :: '' ::=

defn
e1 --> e2 :: :: reduce :: 'r_' {{ com Reduction in Source Language }}
by

e1 --> e2
---------------- :: app
e1 e3 --> e2 e3

-------------------------------------------- :: beta
(lambda x : A. e1 : B) e2 --> [e2 / x] e1

mono e
-------------------------------------------- :: inst
(bind x : A. e1 : B) e2 --> ([e / x] e1) e2

% -------------------------------------- :: mu
% mu x : A. e --> [mu x : A. e / x] e

e1 --> e2
-------------------------------- :: castdn
castdn e1 --> castdn e2

mono e
-------------------------------------------------------- :: cast_inst
castdn (bind x : A. e1 : B) --> castdn ([e / x] e1)

-------------------------------- :: cast_elim
castdn (castup [B] e) --> e

defns
InContext :: '' ::=

defn
x : A in G :: :: in_ctx :: 'in_'
by

------------------ :: here
x : A in G, x : A

x : A in G
------------------ :: there
x : A in G, y : B

defns
UnifiedSubtyping :: '' ::=

defn
|- G :: :: wf_context :: 'wf_'
by

------- :: nil
|- nil

|- G
x # G
G |- A : k
------------- :: cons
|- G , x : A

defn
G |- e1 <: e2 : A :: :: usub :: 's_'
by


|- G
x : A in G
------------------- :: var
G |- x <: x : A

|- G
------------------- :: lit
G |- n <: n : int

|- G
------------------- :: star
G |- * <: * : box

|- G
------------------- :: int
G |- int <: int : *

G |- A1 <: A2 : k
G |- A2 <: A1 : k
---------------------------- :: bot
G |- bot : A1 <: bot : A2 : A1

G |- A1 <: A2 : k1
G |- A2 <: A1 : k1
G , x : A1 |- B1 <: B2 : k2
G , x : A1 |- B2 <: B1 : k2
% G , x : A2 |- B1 <: B2 : k2
% G , x : A2 |- B2 <: B1 : k2
G , x : A1 |- e1 <: e2 : B1
---------------------------------------------------------------------- :: abs
G |- lambda x : A1. e1 : B1 <: lambda x : A2. e2 : B2 : pi x : A1. B1

G |- A1 : k1
G |- A2 <: A1 : k1
G , x : A1 |- B1 : k2
G , x : A2 |- B1 <: B2 : k2
---------------------------------------- :: pi
G |- pi x : A1. B1 <: pi x : A2. B2 : k2

mono t
G |- t : A
G |- e1 <: e2 : pi x : A. B
------------------------------- :: app
G |- e1 t <: e2 t : [t/x]B

G |- A1 <: A2 : k
G |- A2 <: A1 : k
G , x : A1 |- B1 <: B2 : *
G , x : A1 |- B2 <: B1 : *
% G , x : A2 |- B1 <: B2 : *
% G , x : A2 |- B2 <: B1 : *
G , x : A1 |- e1 <: e2 : B1
x # e1*
x # e2*
---------------------------------------------------------------- :: bind
G |- bind x : A1. e1 : B1 <: bind x : A2. e2 : B2 : forall x : A1. B1

% mono s
% G |- t : k
% G , x : t |- s : t
% ------------------------------------ :: mu
% G |- mu x : t. s <: mu x : t. s : t

G |- A1 <: A2 : k
G |- A2 <: A1 : k
A1 --> B
A2 --> B
G |- e1 <: e2 : B
--------------------------------------- :: castup
G |- castup [A1] e1 <: castup [A2] e2 : A1

G |- B : k
A --> B
G |- e1 <: e2 : A
--------------------------------------- :: castdn
G |- castdn e1 <: castdn e2 : B

mono t
G |- A : k
G |- t : A
G |- [t/x] B <: C : *
G , x : A |- B : *
------------------------------- :: forall_l
G |- forall x : A. B <: C : *

G |- B : k
G |- A : *
G , x : B |- A <: C : *
------------------------------- :: forall_r
G |- A <: forall x : B. C : *

G |- A1 <: A2 : k
G |- A2 <: A1 : k
G , x : A1 |- B <: C : *
-------------------------------------------- :: forall
G |- forall x : A1. B <: forall x : A2. C : *

G |- e1 <: e2 : A
G |- A  <: B  : k
------------------ :: sub
G |- e1 <: e2 : B
